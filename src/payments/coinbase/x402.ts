import { z } from 'zod'; import { safeLog } from '../utils'; import fetch from 'cross-fetch'; export const X402Intent=z.object({amountMinor:z.number().int().positive(),asset:z.string().default(process.env.X402_DEFAULT_ASSET||'USDC'),network:z.string().default(process.env.X402_DEFAULT_NETWORK||'base'),to:z.string(),memo:z.string().optional()}); export type X402Intent=z.infer<typeof X402Intent>; export type X402Receipt={rail:'X402',status:'SIMULATED'|'PENDING'|'CONFIRMED'|'FAILED',txid?:string,intent:X402Intent}; export async function createTransfer(i:X402Intent):Promise<X402Receipt>{ const payload={...i,agent:process.env.X402_AGENT_ID}; const live=process.env.X402_LIVE==='true'&&process.env.PAYMENTS_DRY_RUN!=='true'; if(!live){ safeLog('x402.simulate',payload); return {rail:'X402',status:'SIMULATED',intent:i} } const res=await fetch(`${process.env.X402_API_BASE}/transfers`,{method:'POST',headers:{'Authorization':`Bearer ${process.env.X402_API_KEY}`,'Content-Type':'application/json','Idempotency-Key':Date.now().toString()},body:JSON.stringify(payload)}); if(!res.ok) throw new Error('x402 error: '+res.status); const j:any=await res.json(); return {rail:'X402',status:j.status||'PENDING',txid:j.txid,intent:i} }